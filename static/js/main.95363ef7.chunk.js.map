{"version":3,"sources":["components/Square.js","App.js","serviceWorker.js","index.js"],"names":["Square","_this","this","index","props","react_default","a","createElement","Fragment","id","onClick","handleChange","square","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","winCheck","squares","winner","state","winConditions","i","length","_winConditions$i","slicedToArray","b","c","console","log","concat","winnerMessage","includes","setState","_this$state","currentPlayer","win","handleRestart","window","location","reload","toConsumableArray","Array","fill","_this2","grid","map","components_Square","key","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95363ef7.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Square extends Component{\n  render(){\n    let { index } = this.props\n    return(\n      <React.Fragment>\n        <div id=\"square\" onClick= { () => this.props.handleChange(index)}>\n          {this.props.square}\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default Square\n","import React, { Component } from 'react'\nimport Square from './components/Square'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      squares: [...Array(9).fill(\" \")],\n      currentPlayer: 1,\n      winner: null,\n    }\n  }\n  \n  //get indexes of all X so we have a new array of the index[X] and compare to winCondition\n  winCheck = (squares) => {\n    let { winner } = this.state\n    // possible win condition index combinations\n    const winConditions = [\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,5,8],\n      [2,4,6],\n      [0,4,8]\n    ]\n    // go through all subarrays of the win conditions\n    for (let i = 0; i < winConditions.length; i++) {\n      // destructor the values at each subarray to simply a, b, c\n      const [a, b, c] = winConditions[i]\n      // check if the symbol of 'X' or 'O' is the same at locations a, b, and c\n      // if the same symbol is found in the given winning conditions, then return the winner symbol\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        console.log(`winner: ${squares[a]}`)\n        return this.winnerMessage(squares[a])\n      } else if (!squares.includes(\" \") && winner === null) {\n        return this.setState({winner: \"*meow* ðŸ™€ CATS GAME.\"})\n      }\n    }\n    return null\n  }\n\n  handleChange = (i) => {\n    let { squares, currentPlayer} = this.state\n    if(squares[i] !== \" \" ){\n      console.log(\"bailed early\")\n      return \n    } else if (currentPlayer === 0 ) {\n      squares[i] = \"O\"\n      // call functin\n      this.winCheck(squares)\n      currentPlayer = 1 \n    } else {\n      squares[i] = \"X\"\n      this.winCheck(squares)\n      currentPlayer = 0\n    }\n    // console.log(`current player: ${currentPlayer}`)\n    // console.log(`squares array: ${squares}`)\n    this.setState({squares: squares, currentPlayer: currentPlayer})\n  }\n\n  winnerMessage = (win) => {\n    // console.log(`squares array: ${squares}`)\n    if (win === 'X') {\n      this.setState({winner: \"X is the WINNER!\"})\n    } else if (win === 'O') {\n      this.setState({winner: \"O is the WINNER!\"})\n    }\n  }\n\n  handleRestart = () => {\n    window.location.reload()\n  }\n\n  render(){\n    let { squares } = this.state\n    let grid = squares.map((square, index) => {\n      return (\n        <Square \n        handleChange = { this.handleChange }\n        square = { square }\n        index = { index }\n        key = { index }\n        />\n      )\n    })\n    return(\n      <React.Fragment>\n        <h1>Tic Tac Toe</h1>\n        <h2> { this.state.winner !== null? this.state.winner : `Current Player : ${this.state.currentPlayer === 1? \"X\" : \"O\"}` }</h2>\n        <div id=\"gameBoard\">\n          { grid }\n        </div>\n        <button\n          id=\"restart-button\"\n          onClick = {this.handleRestart}>Restart Game</button>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}